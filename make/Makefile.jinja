
{#
 #   Macro to transform *.c -> *.o
 #}
{% macro compile_c(filemap) %}
{% for source, target in filemap %}
{{ target.path }} : {{ source.path }}
	@echo {{ source.filename|colorize('yellow') }}
	@mkdir -p {{ target.dirname }}
	@{{ e.cc }} {{ e.cflags }} -o $@ -c {{ source.path }}
{% endfor %}
{% endmacro %}

{#
 #   Macro to transform *.cpp -> *.o
 #}
{% macro compile_cpp(filemap) %}
{% for source, target in filemap %}
{{ target.path }} : {{ source.path }}
	@echo {{ source.filename|colorize('yellow') }}
	@mkdir -p {{ target.dirname }}
	@{{ e.cxx }} {{ e.cflags }} {{ e.cxxflags }} -o $@ -c {{ source.path }}
{% endfor %}
{% endmacro %}


{#
 #   Macro to build an AVR library
 #       source_dir - dir where *.c and *.cpp are
 #       name       - desired library name without suffix and prefix,
 #                    e.g. Ethernet
 #       add_to     - list where result path should be added
 #}
{% macro build_library(source_dir, name, add_to) %}
{% set libdir = e.build_dir|pjoin(name) %}
{% set c = source_dir|glob('*.c')|filemap(libdir, e.names.obj) %}
{% set cpp = (source_dir|glob('*.cpp'))|filemap(libdir, e.names.obj) %}
{% set libpath = libdir|pjoin(name|libname) %}
{% set libobjs = c.target_paths() + cpp.target_paths() %}
{{ compile_c(c) }}
{{ compile_cpp(cpp) }}
{{ libpath }} : {{ libobjs }}
	@echo {{ ('Linking ' ~ name|libname) |colorize('green') }}
	@{{ e.ar }} rcs $@ {{ libobjs }}
{% do add_to.append(libpath) %}
{% endmacro %}

{#
 #   library sources -> *.a
 #}
{% set libs = SpaceList() %}
{{ build_library(e.arduino_core_dir, 'core', add_to=libs) }}
{% for libdir in e.extra_libs %}
{{ build_library(libdir, libdir|basename, add_to=libs) }}
{% endfor %}

{#
 #   *.pde -> *.cpp
 #}
{% set pde = e.src_dir|glob('*.pde')|filemap(e.build_dir, '%s.cpp') %}
{% for source, target in pde.iterpaths() %}
{{ target }} : {{ source }}
	@echo '#include <WProgram.h>' > $@
	@cat {{ source }} >> $@
{% endfor %}

{#
 #   *.c -> *.o
 #}
{% set c = e.src_dir|glob('*.c')|filemap(e.build_dir, e.names.obj) %}
{{ compile_c(c) }}

{#
 #   *.cpp -> *.o
 #}
{% set cpp = (e.src_dir|glob('*.cpp') + pde.targets())|filemap(e.build_dir, e.names.obj) %}
{{ compile_cpp(cpp) }}

{#
 #   *.o -> elf
 #}
{% set objs = c.target_paths() + cpp.target_paths() + libs %}
{% set elf = e.build_dir|pjoin('firmware.elf') %}
{{ elf }} : {{ objs }}
	@echo {{ 'Linking firmware.elf'|colorize('green') }}
	@{{ e.cc }} {{ e.elfflags }} -o $@ {{ objs }} -lm

{#
 #   elf -> hex
 #}
{{ e.hex_path }} : {{ elf }}
	@echo {{ ('Converting to ' ~ e.hex_filename)|colorize('green') }}
	@{{ e.objcopy }} -O ihex -R .eeprom {{ elf }} $@

include {{ e.build_dir|pjoin('dependencies.d') }}

all : {{ e.hex_path }}

{#
vim:noexpandtab filetype=jinja
#}
